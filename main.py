import telebot
from telebot import types
from config import TOKEN
import utils
import components
from datetime import datetime
bot = telebot.TeleBot(TOKEN)

tokens ={}
login = {}
user_states = {}


@bot.message_handler(commands=['start'])
def start_func(message):
    bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–∏–±–µ—Ä—Å–ø–æ—Ä—Ç –≤ —Å–µ—Ä–¥—Ü–µ –†–æ—Å—Å–∏–∏!\n\nüîπ –ë—É–¥—å –≤ –∫—É—Ä—Å–µ —Å–∞–º—ã—Ö –∫—Ä—É–ø–Ω—ã—Ö –∫–∏–±–µ—Ä—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –°–∞–º–∞—Ä—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏\nüîπ –£—á–∞—Å—Ç–≤—É–π –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö –∏ –∑–∞–±–∏—Ä–∞–π —Å–∞–º—ã–µ –∫—Ä—É–ø–Ω—ã–µ –¥–µ–Ω–µ–∂–Ω—ã–µ –ø—Ä–∏–∑—ã\nüîπ –ü–µ—Ä–≤—ã–º —É–∑–Ω–∞–≤–∞–π –æ —Å–∞–º—ã—Ö –≥–æ—Ä—è—á–∏—Ö –Ω–æ–≤–æ—Å—Ç—è—Ö –∏–∑ –º–∏—Ä–∞ –∫–∏–±–µ—Ä—Å–ø–æ—Ä—Ç–∞',
                     reply_markup=types.ReplyKeyboardRemove())
    markup = components.add_init_btns(4, ['–ú–∞—Ç—á–∏', '–¢—É—Ä–Ω–∏—Ä—ã', '–ö–æ–º–∞–Ω–¥—ã', '–ê–∫–∫–∞—É–Ω—Ç'])
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=markup)


@bot.message_handler(commands=['menu'])
def start_func(message):
    menu(message.chat.id)


@bot.message_handler(commands=['help'])
def start_func(message):
    bot.send_message(message.chat.id, '–î–∞–≤–∞–π—Ç–µ —è –ø–æ–∑–Ω–∞–∫–æ–º–ª—é –í–∞—Å —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ —è –∑–Ω–∞—é:\n/start - –Ω–∞—á–∞—Ç—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –±–æ—Ç–æ–º\n/menu - –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–ú–µ–Ω—é –æ—Å–Ω–∞—â–µ–Ω–æ –∫–Ω–æ–ø–∫–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –Ω–∏–∂–µ –ø–æ–ª—è –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è. \n\n–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –º–æ–µ–π —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞ –ø–æ—á—Ç—É support_esport_sr@yandex.ru',
                     reply_markup=types.ReplyKeyboardRemove())
    markup = components.add_btns(1, [])
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup)


def menu(chat_id):
    markup = components.add_init_btns(4, ['–ú–∞—Ç—á–∏', '–¢—É—Ä–Ω–∏—Ä—ã', '–ö–æ–º–∞–Ω–¥—ã', '–ê–∫–∫–∞—É–Ω—Ç'])
    bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=markup)


def get_profile_info(chat_id):
    response = utils.get_profile(tokens[chat_id])
    print(response.status_code)

    if response.status_code == 200:
        response_data = response.json()
        print(response_data)

        name = response_data['teamName']
        names = ""
        for num1, item1 in enumerate(response_data['teamUser']):
            names += item1['userLastName'] + item1['userFirstName'] + '\n'
        bot.send_message(chat_id, f'–ö–æ–º–∞–Ω–¥–∞ "{name}"\n–°–æ—Å—Ç–∞–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n{names}')
        menu(chat_id)
    else:
        bot.send_message(chat_id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.')
        tokens[chat_id] = None
        menu(chat_id)


@bot.message_handler(func=lambda message: message.text == '–ê–∫–∫–∞—É–Ω—Ç')
def profile(message):
    if message.chat.id in tokens:
        get_profile_info(message.chat.id)
    else:
        user_states[message.chat.id] = 'waiting_for_login'
        bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ email –∫–æ–º–∞–Ω–¥—ã:', reply_markup=types.ReplyKeyboardRemove())


@bot.message_handler(func=lambda message: message.text == '–¢—É—Ä–Ω–∏—Ä—ã')
def tournaments(message):
    msg = message
    response = utils.get_all()
    print(response.status_code)

    if response.status_code == 200:
        response_data = response.json()
        print(response_data)
        for num, item in enumerate(response_data):
            name = item['tournamentName']
            game = item['tournamentGame']['gameName']
            start_day = datetime.strptime(item['tournamentStartDay'], '%Y-%m-%d').strftime('%d.%m')
            end_day = datetime.strptime(item['tournamentEndDay'], '%Y-%m-%d').strftime('%d.%m')
            desc = item['tournamentDescription']
            bot.send_message(message.chat.id, f'{name} - {game}üî•\n{start_day}-{end_day}\n\n{desc}')
        menu(message.chat.id)

    else:
        bot.send_message(message.chat.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.')
        menu(msg.chat.id)


@bot.message_handler(func=lambda message: message.text == '–ú–∞—Ç—á–∏')
def matches(message):
    msg = message
    response = utils.get_all_matches()
    print(response.status_code)

    if response.status_code == 200:
        response_data = response.json()
        print(response_data)
        for num, item in enumerate(response_data):
            name = item['matchTournament']['tournamentName']
            name_m = item['matchName']
            game = item['matchGame']['gameName']
            start_day = datetime.strptime(item['matchStartDay'], '%Y-%m-%d').strftime('%d.%m')
            bot.send_message(message.chat.id, f'{name_m}\n{name} - {game}üî•\n{start_day}')
        menu(message.chat.id)

    else:
        bot.send_message(message.chat.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.')
        menu(msg.chat.id)


@bot.message_handler(func=lambda message: message.text == '–ö–æ–º–∞–Ω–¥—ã')
def teams(message):
    msg = message
    response = utils.get_all_teams()
    print(response.status_code)

    if response.status_code == 200:
        response_data = response.json()
        print(response_data)
        for num, item in enumerate(response_data):
            name = item['teamName']
            names = ""
            for num1, item1 in enumerate(item['teamUser']):
                names += item1['userLastName']+item1['userFirstName']+'\n'
            bot.send_message(message.chat.id, f'–ö–æ–º–∞–Ω–¥–∞ "{name}"\n–°–æ—Å—Ç–∞–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n{names}')
        markup = components.add_btns(2, ['–ü–æ–¥—Ä–æ–±–Ω–µ–µ'])
        bot.send_message(msg.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup)

    else:
        bot.send_message(message.chat.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.')
        menu(msg.chat.id)


@bot.message_handler(func=lambda message: message.text == '–ü–æ–¥—Ä–æ–±–Ω–µ–µ')
def team_info(message):
    msg = message
    bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ç–æ—Ä–æ–π –í—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å:', reply_markup=types.ReplyKeyboardRemove())
    user_states[msg.chat.id] = "waiting_for_name"


def auth(chat_id):
    bot.send_message(chat_id,
                     '–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã, —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ —Å–∏—Å—Ç–µ–º–µ:',
                     reply_markup=types.ReplyKeyboardRemove())
    user_states[chat_id] = 'waiting_for_login'


@bot.message_handler(func=lambda message: True)
def text(message):
    if user_states.get(message.chat.id) == 'waiting_for_login':
        login[message.chat.id] = message.text
        user_states[message.chat.id] = 'waiting_for_password'
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –í–∞—à –ø–∞—Ä–æ–ª—å:')
    elif user_states.get(message.chat.id) == 'waiting_for_password':
        msg = message
        password = message.text
        user_states[message.chat.id] = None
        bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ!')

        response = utils.auth_signin(login[message.chat.id], password)
        login[message.chat.id] = None
        print(response.status_code)

        if response.status_code == 200:
            response_data = response.json()
            access_token = response_data['token']
            tokens[msg.chat.id] = access_token
            # token_type = response_data['token_type']
            #role[message.chat.id] = utils.users_profile(access_token).json()['role_id']
            bot.send_message(message.chat.id, f'–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç.')
            menu(message.chat.id)

        else:
            bot.send_message(message.chat.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.')
            menu(msg.chat.id)

    elif user_states.get(message.chat.id) == 'waiting_for_name':
        response = utils.get_team_by_name(message.text)
        print(response.status_code)

        if response.status_code == 200:
            response_data = response.json()
            print(response_data)

            name = response_data['teamName']
            names = ""
            for num1, item1 in enumerate(response_data['teamUser']):
                names += item1['userLastName'] + item1['userFirstName'] + '\n'
                bot.send_message(message.chat.id, f'–ö–æ–º–∞–Ω–¥–∞ "{name}"\n–°–æ—Å—Ç–∞–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n{names}')
            menu(message.chat.id)
        else:
            bot.send_message(message.chat.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.')
            menu(message.chat.id)
    else:
        bot.send_message(message.chat.id, '–ë–æ—Ç –í–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /menu –∏–ª–∏ /help')


if __name__ == '__main__':
    bot.infinity_polling()